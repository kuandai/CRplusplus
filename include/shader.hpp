#pragma once

#include <glad/glad.h>

#include <glm/gtc/type_ptr.hpp>

#include <string>

namespace Marlin {
    class Shader {
        public:
            unsigned int ID;

            /**
             * @brief Compile shader program
             * 
             * Compiles and links shader program from vertex shader source + 
             * fragment shader source. Source strings should be generated by
             * xxd. Prints to stdout if shader compilation fails.
             * 
             * @param vertexSource Vertex Shader source
             * @param fragmentSource Fragment Shader source
             * @return Linked shader program
            */
            Shader(const char* vertexSource, const char* fragmentSource);

            // Activate shader
            void use();

            // Utility Uniform functions
            void setBool(const std::string &name, bool value) const;
            void setInt(const std::string &name, int value) const; 
            void setFloat(const std::string &name, float value) const;
            void setMat4(const std::string &name, glm::mat4 &value) const;

    };
}